import React from "react";
import IngredientsList from "./IngredientsList";
import ClaudeRecipe from "./ClaudeRecipe";
import { useEffect, useRef, useState } from "react";
import { useSocket } from "../socketContext";


function Main() {
  const socket = useSocket();
  // to store the ingredients added by the user
  const [Ingredients, setIngredients] = React.useState([]);
  //to store the recipe generated by ai
  const [Recipe, setRecipe] = React.useState("");
  const [loading, setLoading] = useState(false);
  
  const REACT_APP_API_URL = process.env.BACKEND_URL;
  const recipeRef = useRef(null);

  useEffect(() => {
    if (!socket) return;

    socket.on("backend_recipe", (msg) => {
      setLoading(false);
      setRecipe(msg);
      // alert(msg);
      // console.log(msg);
    });

    return () => {
      socket.off("backend_recipe");
    };
  }, [socket]);

  // scroll to the recipe whenever it is generated
  useEffect(() => {
    if (Recipe !== null && recipeRef !== null) {
      recipeRef.current.scrollIntoView({ behaviour: "smooth" });
    }
  }, [Recipe]);

  // add the new ingredient to the ingredients state
  function handleSubmit(formData) {
    const newIngredient = formData.get("ingredient");
    setIngredients((prev) => [...prev, newIngredient]);
  }

  // to send the ingredients to backend and receive the recipe
  async function generateRecipe() {
    setLoading(true);

    const response = await fetch(`${REACT_APP_API_URL}/sendRecipe`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ ingredients: Ingredients }),
    });

    if (!response.ok) {
      throw new Error("Failed to fetch recipe");
    }
  }

  return (
    <main className="content">
      <form action={handleSubmit} className="add-ingredient-form">
        <input
          type="text"
          placeholder="Add Atleast 3 Ingredients"
          name="ingredient"
          aria-label="Add ingredient"
        />
        <button>Add Ingredient</button>
      </form>

      <IngredientsList list={Ingredients} genRecipe={generateRecipe} />
      {loading ? (
        <div id="loading">
          <div className="spinner"></div>
          <p>Loading...</p>
        </div>
      ) : (
        <div className="recipe_container">
          <ClaudeRecipe ref={recipeRef} recipe={Recipe} />
        </div>
      )}
    </main>
  );
}

export default Main;
